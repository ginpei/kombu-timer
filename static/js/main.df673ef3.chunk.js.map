{"version":3,"sources":["screens/TimerPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["participants","name","key","TimingManager","timings","participant","last","this","lastElapse","timing","createTiming","push","datetime","Date","now","toString","participantId","t","lastTiming","calculateElapse","length","ParticipantButton","props","className","data-active","active","onClick","ms","s","Math","floor","m","readableElapse","elapse","TimerPage","useState","timingMan","reduce","list","prepareElapseList","elapses","activeParticipant","setActiveParticipant","activeElapse","setActiveElapse","useEffect","tm","window","setInterval","clearInterval","onParticipantClick","add","map","p","currentElapse","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df673ef3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TimerPage.scss';\n\ntype Participant = {\n  name: string;\n  key: string;\n}\n\nconst participants: Participant[] = [\n  {\n    name: 'Alice',\n    key: 'a',\n  },\n  {\n    name: 'Bob',\n    key: 'b',\n  },\n  {\n    name: 'Charlie',\n    key: 'c',\n  },\n  // {\n  //   name: 'Dan',\n  //   key: 'd',\n  // },\n]\n\ntype Timing = {\n  datetime: number;\n  key: string;\n  participantId: string | null;\n}\n\nclass TimingManager {\n  private timings: Timing[] = [];\n\n  get lastElapse(): number {\n    const t = this.lastTiming;\n    if (!t || t.participantId === null) {\n      return 0;\n    }\n    return this.calculateElapse(t);\n  }\n\n  private get lastTiming(): Timing | null {\n    return this.timings[this.timings.length - 1] || null;\n  }\n\n  add(participant: Participant | null) {\n    const last = this.lastElapse;\n\n    const timing = this.createTiming(participant);\n    this.timings.push(timing);\n\n    return last;\n  }\n\n  private createTiming(participant: Participant | null) {\n    const timing: Timing = {\n      datetime: Date.now(),\n      key: Date.now().toString(),\n      participantId: participant?.key ?? null,\n    };\n\n    return timing;\n  }\n\n  private calculateElapse(timing: Timing, now = Date.now()) {\n    return now - timing.datetime;\n  }\n}\n\ntype ParticipantButtonProps = {\n  active: boolean;\n  elapse: number;\n  onClick: (p: Participant) => void;\n  participant: Participant;\n}\n\nconst ParticipantButton: React.FC<ParticipantButtonProps> = (props) => {\n  const onClick = () => props.onClick(props.participant);\n\n  return (\n    <button\n      className=\"TimerPage-participantButton\"\n      data-active={props.active}\n      onClick={onClick}\n    >\n      {props.participant.name} ({readableElapse(props.elapse)})\n    </button>\n  );\n};\n\nconst TimerPage: React.FC = () => {\n  const [timingMan] = useState(new TimingManager());\n  const [elapses] = useState(prepareElapseList(participants));\n  const [activeParticipant, setActiveParticipant] =\n    useState<Participant | null>(null);\n\n  const [activeElapse, setActiveElapse] = useState(0);\n  useEffect(() => {\n    setActiveElapse(0);\n\n    if (!activeParticipant) {\n      return;\n    }\n\n    const tm = window.setInterval(\n      () => setActiveElapse(timingMan.lastElapse),\n      16,\n    );\n\n    return () => window.clearInterval(tm);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeParticipant]);\n\n  const onParticipantClick = (participant: Participant) => {\n    if (participant === activeParticipant) {\n      const elapse = timingMan.add(null);\n      elapses[activeParticipant.key] += elapse;\n\n      setActiveParticipant(null);\n    } else {\n      const elapse = timingMan.add(participant);\n      if (activeParticipant) {\n        elapses[activeParticipant.key] += elapse;\n      }\n\n      setActiveParticipant(participant);\n    }\n  };\n\n  return (\n    <div className=\"TimerPage\">\n      <header className=\"TimerPage-header\">\n        Timer\n      </header>\n      <div className=\"TimerPage-participantList\">\n        {participants.map((p) => {\n          const active = p === activeParticipant;\n          const elapse = elapses[p.key];\n          const currentElapse = active\n            ? elapse + activeElapse\n            : elapse;\n          return (\n            <ParticipantButton\n              active={active}\n              elapse={currentElapse}\n              key={p.key}\n              onClick={onParticipantClick}\n              participant={p}\n            />\n          );\n        })}\n      </div>\n      <footer>\n        footer\n      </footer>\n    </div>\n  );\n};\n\nfunction prepareElapseList(participants: Participant[]) {\n  return participants.reduce((list, participant) => {\n    list[participant.key] = 0;\n    return list;\n  }, {} as Record<string, number>);\n}\n\nfunction readableElapse(ms: number) {\n  if (ms === 0) {\n    return '0';\n  }\n\n  const s = Math.floor(ms / 1000);\n  if (s < 60) {\n    return `${s} sec`\n  }\n\n  const m = Math.floor(s / 60);\n\n  return `${m} min`;\n}\n\nexport default TimerPage;\n","import React from 'react';\nimport TimerPage from './screens/TimerPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TimerPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}